https://www.gnu.org/software/make/manual/make.html#Reading
MAKE

* controls the generation of executables
* generation of other non-source files of a program from the program's source files.
??wtf it means??


Make gets its knowledge of how to build your program from a file called the makefile,
which lists each of the non-source files and how to compute it from other files.
When you write a program, you should write a makefile for it, so that it is possible to
use Make to build and install the program.


a makefile tells make how to compile and link a program


RULE
A simple makefile consists of “rules” with the following shape:

 target … : prerequisites …
        recipe
        …
        …


A target is usually the name of a file that is generated by a program;
examples of targets are executable or object files. A target can also be the name of
an action to carry out, such as ‘clean’ (see Phony Targets).

A prerequisite is a file that is used as input to create the target. A target
often depends on several files.

A recipe is an action that make carries out. A recipe may have more than one command,
either on the same line or each on its own line. Please note: you need to put a tab
character at the beginning of every recipe line! This is an obscurity that catches the
unwary. If you prefer to prefix your recipes with a character other than tab, you can set
the .RECIPEPREFIX variable to an alternate character (see Special Variables).

Usually a recipe is in a rule with prerequisites and serves to create a target file if
any of the prerequisites change. However, the rule that specifies a recipe for the target
need not have prerequisites. For example, the rule containing the delete command
associated with the target ‘clean’ does not have prerequisites.

A rule, then, explains how and when to remake certain files which are the targets of the
particular rule. make carries out the recipe on the prerequisites to create or update the
target. A rule can also explain how and when to carry out an action. See Writing Rules.

A makefile may contain other text besides rules, but a simple makefile need only contain
rules. Rules may look somewhat more complicated than shown in this template, but all fit
the pattern more or less.



Compiling a C program
Type gcc main.c –o HelloWorld. Replace “main.c” with the name of your source file,
and “HelloWorld” with the name of your finished program. The program will now compile.

If you see errors and want to see more information about them, use gcc -Wall -o
errorlog file1.c. Then, view the “errorlog” file in the current directory with cat
errorlog.

To compile one program from multiple source files,
use gcc -o outputfile file1.c file2.c file3.c.

To compile multiple programs at once with multiple source files,
use gcc -c file1.c file2.c file3.c.